# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: prod CI

on:
  # pull_request:
  #   branches: [master]
  push:
    branches: [prod]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: checkout master
        uses: actions/checkout@v2
      # - name: setup docker MySQL
      #   run: docker-compose up -d
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      # - name: Install modules
      #   run: yarn
      # - name: Set up Prisma migration and generate
      #   env:
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #     SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
      #   run: |
      #     yarn migrate
      #     yarn generate
      #     yarn seed
      #     yarn batch
      # - name: test
      #   env:
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #     SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
      #     JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #     GCP_MAPS_APIKEY: ${{ secrets.GCP_MAPS_APIKEY }}
      #     RAPID_API_KEY: ${{ secrets.RAPID_API_KEY }}
      #   run: yarn test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CODEDEPLOY_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_CODEDEPLOY_USER_SECRET_ACCESS_KEY }}
          # TODO Change your AWS region here!
          aws-region: ${{secrets.AWS_REGION}}

      - name: Code Deploy
        run: aws deploy create-deployment --application-name brip-api --file-exists-behavior OVERWRITE --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name brip-api-codedeploy-group --s3-location bucket=brip-dev,bundleType=zip,key=deploy/build.zip
