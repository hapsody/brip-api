<!DOCTYPE html>
<html>
  <head>
    <title>클러스터링 시각화 테스트</title>
    <meta charset="utf-8" />
    <!-- 오픈API -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script>
      let canvas, ctx;

      let gData; /// makeSchedule 전체 결과값
      let gSpots; /// makeSchedule 결과 검색된 여행지 배열
      let gCentroids; /// 최종 전체 클러스터링 결과들
      let gRadius; /// 클러스터링 반경값, 여행강도와 여행타입에 따라 영향받아 결정된다.
      let gNonDupCentroids; /// 클러스터링 전체 결과중 (gCentroids) 충분히 가까운값은 하나의 클러스터링으로 간주하고 버린 결과. 즉 미중복 클러스터들이다.
      let gValidCentroids; /// nonDupCentroids 결과중 해당 클러스터에서 머무는 기간동안 방문해야할 여행지수보다 충분히 큰 여행지를 보유한 결과만을 유효한 클러스터로 간주하고 나머지는 버린결과. 결국 최종적으로 이 값위에 여행 일정이 짜여진다.
      /// spot data 들의 최소 최대 lat(=y), lng(=x) 를 찾아 넣는다.
      let gSpotsGeoLocation, gFoodsGeoLocation;
      let gMaxX, gMinX, gMaxY, gMinY;
      /// 여행지 점 크기
      let spotPointSize = 2;
      /// 클러스터 중심점 크기
      let centPointSize = spotPointSize * 2;
      let radiusCircleSize = 0;
      /// 보여줄 항목 요소들 최소 최대값 바깥으로 캔버스 여백을 더해주기 위한 파라미터들
      const blankMultiplier = 20; // 높을수록 캔버스 여백 비율이 작아진다.
      let blankSizeX, blankSizeY;
      let gDistributionThickness;
      /// 캔버스 크기
      const canvasWidth = 4800.0;
      const canvasHeight = 4800.0;
      /// 지도에 보여줄 필터링 위경도 범위, 이 범위값으로 spot 또는 food 항목 결과들을 필터링한다.
      const clipMinLat = 33.109684; // 제주 지역만 필터링
      const clipMaxLat = 33.650946;
      const clipMinLng = 126.032175;
      const clipMaxLng = 127.048411;
      let gRDistToPxLength;
      let gPlayMode = {
        /// 직전 load 또는 play 함수 실행할때 어떤 옵션으로 수행했었는가를 기록 이 값에 따라 clickCanvas 실행할때 결과값을 보고 있는 화면의 결과에 맞게 뿌려줌.
        spot: false,
        centroid: false,
        history: false,
        stageNo: false,
        centId: false,
        nonDup: false,
      };
      let gFilteredRes = {}; /// 캔버스를 클릭했을때 생기는 반경안에 속한 요소 또는 클러스터들의 정보를 필터링하여 저장하고 있는 객체 변수
      let gResetOpt = true;
      let gResultMode = 'spot'; /// 'spot' or 'food'

      const palette = [
        'brown',
        'yellow',
        'purple',
        'darkgreen',
        'aqua',
        'gray',
      ];

      /// 캔버스를 클릭했을때 생기는 반경안에 속한 요소 또는 클러스터들의 정보를 필터링 반환하는 함수
      function clickCanvas(event) {
        clickCheckCtx.clearRect(0, 0, canvasWidth, canvasHeight);
        const clickX = event.pageX;
        const clickY = event.pageY;

        /// 클릭지점으로부터 반경 r의 원을 그린다.
        clickCheckCtx.beginPath();
        clickCheckCtx.arc(clickX, clickY, centPointSize, 0, 2 * Math.PI);
        clickCheckCtx.arc(clickX, clickY, radiusCircleSize, 0, 2 * Math.PI);
        clickCheckCtx.globalAlpha = 0.6;
        clickCheckCtx.strokeStyle = 'black';
        clickCheckCtx.stroke();
        clickCheckCtx.closePath();

        const { lng, lat } = coordToGeoLoc({ x: clickX, y: clickY });
        gFilteredRes = {
          x: clickX,
          y: clickY,
          lat,
          lng,
        };

        function sortByDistFromCenter(arr, gFilteredRes) {
          return [...arr]
            .map(v => {
              return {
                ...v,
                pxFromCent: (() => {
                  let ptx, pty;
                  if (v.x === undefined || v.y === undefined) {
                    const { x, y } = geoLocToCoord(v);
                    ptx = x;
                    pty = y;
                  } else {
                    ptx = v.x;
                    pty = v.y;
                  }

                  return Math.sqrt(
                    (ptx - gFilteredRes.x) ** 2 + (pty - gFilteredRes.y) ** 2,
                  );
                })(),
                meterFromCent: Math.round(
                  degreeToMeter(
                    v.lng,
                    v.lat,
                    gFilteredRes.lng,
                    gFilteredRes.lat,
                  ),
                ),
              };
            })
            .sort((a, b) => a.pxFromCent - b.pxFromCent);
        }

        // function sortByDistFromCenter(arr, gFilteredRes) {
        //   const v = this.valueOf();
        //   return (v => {
        //     return {
        //       ...v,
        //       pxFromCent: Math.sqrt(
        //         (v.x - gFilteredRes.x) ** 2 + (v.y - gFilteredRes.y) ** 2,
        //       ),
        //       meterFromCent: Math.round(
        //         degreeToMeter(v.lng, v.lat, gFilteredRes.lng, gFilteredRes.lat),
        //       ),
        //     };
        //   }).sort((a, b) => a.pxFromCent - b.pxFromCent);
        // }

        if (gPlayMode.spot) {
          /// 반경안에 속한 여행지를 찾아 gFilteredRes에 넣는다.
          gFilteredRes = {
            ...gFilteredRes,
            searchedSpot: sortByDistFromCenter(gSpots, gFilteredRes).filter(
              v => {
                return v.pxFromCent < gRDistToPxLength;
              },
            ),
          };
        }
        if (gPlayMode.centroid) {
          /// 반경안에 속한 클러스터를 찾아 gFilteredRes에 넣는다.
          gFilteredRes = {
            ...gFilteredRes,
            searchedNonDupCent: sortByDistFromCenter(
              gNonDupCentroids,
              gFilteredRes,
            ).filter(v => {
              return v.pxFromCent < gRDistToPxLength;
            }),
            /// 반경안에 속한 여행지를 찾아 gFilteredRes에 넣는다, 여기에서 배열 인덱스값은 해당 클러스터 형성의 스테이지이다.
            searchedCent: gHistories.map((history, i) => {
              const { centroids } = history;
              return {
                description: '반경에 포함되는 클러스터',
                stageNo: i,
                centroids: sortByDistFromCenter(centroids, gFilteredRes).filter(
                  v => {
                    return v.pxFromCent < gRDistToPxLength;
                  },
                ),
              };
            }),
          };
        }

        /// 화면에 play한 그림이 특정 클러스터id만이면 캔버스를 클릭해서 반경안에 속한 클러스터 정보를 구할때 그 특정 클러스터만을 대상으로한다.
        if (gPlayMode.centId) {
          gFilteredRes = {
            ...gFilteredRes,
            searchedCluster: gHistories.map((history, i) => {
              const { centroids } = history;
              return {
                description: '반경에 포함되는 클러스터',
                stageNo: i,
                centroids: sortByDistFromCenter(centroids, gFilteredRes).filter(
                  v => {
                    return v.pxFromCent < gRDistToPxLength;
                  },
                ),
              };
            }),
          };
        } else if (gPlayMode.stageNo) {
          /// 화면에 play한 그림이 특정 스테이지면 캔버스를 클릭해서 반경안에 속한 클러스터 정보를 구할때 그 스테이지만을 대상으로한다.
          const stageNo = gPlayMode.stageNo;
          const history = gHistories[stageNo];

          let centroids = history.centroids;

          gFilteredRes = {
            ...gFilteredRes,
            searchedCluster: {
              description: `반경에 포함되는 클러스터들의 stage: ${stageNo}`,
              stageNo,
              centroids: sortByDistFromCenter(centroids, gFilteredRes).filter(
                v => {
                  return v.pxFromCent < gRDistToPxLength;
                },
              ),
            },
          };
        }
        console.log(gFilteredRes);
      }

      $.ajax({
        type: 'post',
        url: 'http://localhost:3000/schedule/makeSchedule',
        async: true,
        headers: {
          'Content-Type': 'application/json',
          Authorization:
            'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJncmFkZSI6Im5vbk1lbWJlciIsInRva2VuSWQiOiIxIiwiaWF0IjoxNjY0NTIwMzU4fQ.t_Bqt3yqDlInUZ29g6tFc3FVGcQ3pE6A47eqerPoJpw',
        },
        // data: JSON.stringify({
        //   ingNow: 'ing',
        //   companion: 'alone',
        //   period: '30',
        //   travelType: ['rest', 'healing', 'exploration'],
        //   destination: 'recommend',
        //   travelHard: '5',
        // }),
        data: JSON.stringify({
          ingNow: 'ing',
          companion: 'alone',
          period: '15',
          travelType: ['rest', 'meeting', 'activity'],
          destination: 'recommend',
          travelHard: '8',
        }),
        success: async function (result) {
          if (gResultMode === 'spot') {
            gData = result.IBparams.spotClusterRes;
            gSpotsGeoLocation = gData.spotsGeoLocation;
          } else {
            gData = result.IBparams.foodClusterRes;
            gFoodsGeoLocation = gData.foodsGeoLocation;
          }

          const {
            centroids,
            centHistoryByStage,
            r,
            nonDupCentroids,
            validCentNSpots,
          } = gData;

          // gSpots = spotsGeoLocation;
          // console.log(gSpots);
          // gCentroids = centroids;
          // gHistories = centHistoryByStage;
          // gNonDupCentroids = nonDupCentroids;
          gSpots = (
            gResultMode === 'spot' ? gSpotsGeoLocation : gFoodsGeoLocation
          ).filter(
            v =>
              v.lat >= clipMinLat &&
              v.lat < clipMaxLat &&
              v.lng >= clipMinLng &&
              v.lng < clipMaxLng,
          );
          console.log(gSpots);
          gCentroids = centroids;
          gHistories = centHistoryByStage;
          gNonDupCentroids = nonDupCentroids;
          gValidCentroids = validCentNSpots;
          console.log(gValidCentroids);

          // gCentroids = centroids.filter(
          //   v =>
          //     v.lat >= clipMinLat &&
          //     v.lat < clipMaxLat &&
          //     v.lng >= clipMinLng &&
          //     v.lng < clipMaxLng,
          // );
          // gHistories = centHistoryByStage.filter(
          //   v =>
          //     v.lat >= clipMinLat &&
          //     v.lat < clipMaxLat &&
          //     v.lng >= clipMinLng &&
          //     v.lng < clipMaxLng,
          // );
          // gNonDupCentroids = nonDupCentroids.filter(
          //   v =>
          //     v.lat >= clipMinLat &&
          //     v.lat < clipMaxLat &&
          //     v.lng >= clipMinLng &&
          //     v.lng < clipMaxLng,
          // );
          gRadius = r;

          const { maxX, minX, maxY, minY } = await gSpots.reduce(
            (result, spot) => {
              const x = spot.lng;
              const y = spot.lat;
              const newRes = { ...result };
              if (x >= newRes.maxX) newRes.maxX = x;
              if (x < newRes.minX) newRes.minX = x;
              if (y >= newRes.maxY) newRes.maxY = y;
              if (y < newRes.minY) newRes.minY = y;
              return newRes;
            },
            {
              maxX: -9999,
              minX: 9999,
              maxY: -9999,
              minY: 9999,
            },
          );
          console.log(
            `maxX:${maxX}, maxY:${maxY} \nminX:${minX}, minY:${minY}`,
          );

          blankSizeX = (maxX - minX) / blankMultiplier;
          blankSizeY = (maxY - minY) / blankMultiplier;

          gMaxX = maxX + blankSizeX;
          gMinX = minX - blankSizeX;
          gMaxY = maxY + blankSizeY;
          gMinY = minY - blankSizeY;

          gDistributionThickness = (() => {
            /// 좌우 또는 상하 위경도 차이값 중 큰 값(distributionThickness) 대비 캔버스 화면의 비율로 위경도를 x,y좌표로 표현한다.
            if (gMaxX - gMinX - (gMaxY - gMinY) > 0) {
              return gMaxX - gMinX;
            } else {
              return gMaxY - gMinY;
            }
          })();

          const geo = await estGeoLocFromMeter(gRadius);
          const { x } = geoLocToCoord(geo);
          console.log(x);
          radiusCircleSize = x;
        },
        error: function (request, status, error) {
          console.log(error);
        },
      });
    </script>

    <script>
      /// 두 위경도 값의 차이를 미터 단위로 환산하여 리턴하는 함수, 위도에 따른 지구 곡률 보정이 포함되어 있다.
      function degreeToMeter(lon1, lat1, lon2, lat2) {
        // generally used geo measurement function
        const R = 6378.137; // Radius of earth in KM
        const dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;
        const dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;
        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos((lat1 * Math.PI) / 180) *
            Math.cos((lat2 * Math.PI) / 180) *
            Math.sin(dLon / 2) *
            Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        const d = R * c;
        return d * 1000; // meters
      }

      /// 입력한 거리(실제 미터)에 대응하는 경도 값을 최소 경도값에서 떨어진 경도 위치로 반환한다.(축척 표시용))
      async function estGeoLocFromMeter(targetMeter) {
        let estMeter = degreeToMeter(gMinX, gMinY, gMaxX, gMinY);
        let rightX = gMaxX - gMinX;
        let estX = rightX;
        let deltaMeter;
        let delta;

        let down = 0;
        let up = 0;
        let cnt = 0;
        const pro = new Promise(resolve => {
          while (Math.abs(targetMeter - estMeter) > 0.1 && cnt < 1000) {
            cnt++;
            delta = rightX / 2;
            deltaMeter = degreeToMeter(0, gMinY, delta, gMinY);
            if (estMeter > targetMeter) {
              estX -= delta;
              down++;
            } else {
              estX += delta;
              up++;
            }
            estMeter = degreeToMeter(0, gMinY, estX, gMinY);
            rightX /= 2;
          }
          // console.log(`down ${down}, up:${up}`);
          resolve(true);
        });

        await pro;

        return {
          lng: estX + gMinX,
          lat: gMinY,
        };
      }

      /// 위경도를 캔버스 x,y좌표로 변환하는 함수
      function geoLocToCoord(geo) {
        const { lng, lat } = geo;

        /// 좌우 또는 상하 위경도 차이값 중 큰 값(distributionThickness) 대비 캔버스 화면의 비율로 위경도를 x,y좌표로 표현한다.
        const transToCanvasX =
          ((lng - gMinX) * canvasWidth) / gDistributionThickness;
        const transToCanvasY =
          canvasHeight -
          ((lat - gMinY) * canvasHeight) / gDistributionThickness;
        return { x: transToCanvasX, y: transToCanvasY };
      }

      function coordToGeoLoc(coord) {
        const { x, y } = coord;
        const transToLng = (x * gDistributionThickness) / canvasWidth + gMinX;
        const transToLat =
          ((canvasHeight - y) * gDistributionThickness) / canvasHeight + gMinY;
        return { lng: transToLng, lat: transToLat };
      }

      /// canvas에 표시하는 함수
      const drawItems = (type, option) => {
        const stageNo = option?.stageNo;
        const historyLength = option?.historyLength;
        const nonDup = option?.nonDup ?? false;

        return (item, i) => {
          const { size, color } = (() => {
            switch (type) {
              case 'spot':
              default:
                return { size: spotPointSize, color: 'gray' };
              case 'centroid':
                return { size: centPointSize, color: 'red' };
              case 'history':
                return {
                  size: Math.round(spotPointSize * 1.5),
                  color: palette[i % palette.length],
                };
              case 'stageNo':
                return {
                  size: Math.round(spotPointSize * 1.5),
                  color: palette[i % palette.length],
                };
            }
          })();
          const p = new Promise(resolve => {
            const { x, y } = geoLocToCoord(item);
            item.x = x;
            item.y = y;
            /// 반경 표시 써클
            if (
              (type === 'history' || type === 'stageNo') &&
              (gNonDupCentroids.find(v => v.idx === i) || nonDup === false)
            ) {
              historyCtx.beginPath();

              historyCtx.arc(x, y, size, 0, 2 * Math.PI);
              historyCtx.stroke();
              historyCtx.fillStyle = color;
              historyCtx.fill();
              historyCtx.font = '25px Comic Sans MS';
              historyCtx.fillText(`${item.idx}[${stageNo}]`, x, y);
              historyCtx.closePath();

              historyCtx.beginPath();
              historyCtx.arc(x, y, radiusCircleSize, 0, 2 * Math.PI);
              historyCtx.globalAlpha = 0.6;
              historyCtx.strokeStyle = color;

              /// 마지막 스테이지일 경우에는 반경에 색깔 채우기 효과
              if (stageNo < historyLength - 1) {
                historyCtx.stroke();
              } else {
                historyCtx.stroke();
                historyCtx.globalAlpha = 0.03;
                historyCtx.fill();
              }
              historyCtx.closePath();
              historyCtx.globalAlpha = 1;
            } else {
              ctx.beginPath();
              ctx.arc(x, y, size, 0, 2 * Math.PI);
              ctx.stroke();
              ctx.strokeStyle = 'black';
              ctx.fillStyle = color;
              ctx.fill();
              ctx.closePath();
            }
            resolve(true);
          });
          return p;
        };
      };

      /// 여행지와 마지막 클러스터 결과(중복 포함) 중심점 표시
      async function load() {
        ctx.clearRect(0, 0, canvasWidth, canvasHeight);
        historyCtx.clearRect(0, 0, canvasWidth, canvasHeight);
        clickCheckCtx.clearRect(0, 0, canvasWidth, canvasHeight);
        console.log(`radius:${gRadius}`);
        const geo = await estGeoLocFromMeter(gRadius);
        const { x: rulerX, y: rulerY } = geoLocToCoord(geo);
        gRDistToPxLength = rulerX;
        console.log(`geo:${JSON.stringify(geo)}`);
        console.log(`rulerX:${rulerX}, rulerY:${rulerY}`);
        console.log(`estMeter: ${degreeToMeter(gMinX, gMinY, geo.lng, gMinY)}`);

        /// mean-Shift 알고리즘 연산반경(radius) 축척 표시
        ctx.beginPath();
        ctx.moveTo(50, canvasHeight - 50);
        ctx.lineTo(rulerX + 50, rulerY - 50);
        ctx.strokeStyle = 'green';
        ctx.lineWidth = 2;
        ctx.font = '30px Comic Sans MS';
        ctx.fillText(`radius: ${gRadius}m`, 50, canvasHeight - 15);
        ctx.stroke();

        const spotsPromises = gSpots.map(drawItems('spot'));
        const centroidPromises = gCentroids.map(drawItems('centroid'));

        gPlayMode = {
          spot: true,
          centroid: true,
          history: false,
          stageNo: false,
          centId: false,
          nonDup: false,
        };
        await Promise.all([...spotsPromises, ...centroidPromises]);
      }

      /// 클러스터 표시 함수
      /// ex) 전체 클러스터 형성과정 표시 => play() <---  전체 centroids 들의 stage 별 변화 play(default 옵션)
      /// ex) 미중복 클러스터의 형성과정 표시 => play({nonDup: true}) <--- 중복되지 않는 centroids 결과값만 보여줌
      /// ex) 특정 클러스터의 형성과정 표시 => play({centId: 2})
      /// ex) 특정 스테이지의 클러스터 상태만 표시 => play({stageNo: 22});
      /// ex) 미중복이자 특정 스테이지 클러스터상태만 보여줌 => play({nonDup: true, stageNo: 22})
      async function play(options) {
        const { nonDup, stageNo, centId } = (() => {
          if (!options) {
            return {
              nonDup: undefined,
              stageNo: undefined,
              centId: undefined,
            };
          }
          const { nonDup, stageNo, centId } = options;
          return {
            nonDup,
            stageNo,
            centId,
          };
        })();
        gPlayMode = {
          ...gPlayMode,
          stageNo: false,
          history: false,
          nonDup: nonDup ? true : false,
          centId: false,
        };

        if (gResetOpt) historyCtx.clearRect(0, 0, canvasWidth, canvasHeight);

        /// 특정 스테이지의 클러스터 상태만 표시
        if (typeof stageNo === 'number') {
          gPlayMode = {
            ...gPlayMode,
            stageNo,
          };
          let { centroids } = gHistories[stageNo];

          /// 특정 클러스터의 특정 스테이지만 표시
          if (typeof centId === 'number') {
            gPlayMode = {
              ...gPlayMode,
              centId,
            };
            centroids = [centroids[centId]];
          }

          const promises = centroids.map(
            drawItems('stageNo', {
              stageNo,
              historyLength: stageNo,
              nonDup,
            }),
          );
          await Promise.all(promises);
          return;
        }

        /// 모든 클러스터 형성과정 표시
        for await (const stage of gHistories) {
          const pro = new Promise(resolve => {
            setTimeout(async () => {
              const { stageNo } = stage;
              let centroids = stage.centroids;

              /// centId가 있다면 centId에 해당하는 클러스터만 표시하도록 표본을 조정
              if (typeof centId === 'number') {
                gPlayMode = {
                  ...gPlayMode,
                  centId,
                };
                console.log(`stageNo:${stageNo}`, centroids[centId]);
                centroids = [centroids[centId]];
              } else {
                gPlayMode = {
                  ...gPlayMode,
                  history: true,
                };
                console.log(stage);
              }

              const promises = centroids.map(
                drawItems('history', {
                  stageNo,
                  historyLength: gHistories.length,
                  nonDup,
                }),
              );
              await Promise.all(promises);
              resolve(true);
            }, 200);
          });
          await pro;
        }
      }

      /// 클러스터 형성과정중 n번 이상 포함하는 요소의 수가 변한 클러스터 배열을 리턴하는 테스트 함수
      function manyChangedCentroids(n) {
        return gCentroids.filter(v => {
          const arr = v.histories.split('-');
          let prevNumber = 'start';
          const diffNum = arr.filter(c => {
            if (prevNumber === 'start' || prevNumber === c) {
              prevNumber = c;
              return false;
            }
            prevNumber = c;
            return true;
          });
          return diffNum.length >= n;
        });
      }

      /// 클러스터 형성과정중 여행지 요소 수가 감소한적이 있는 클러스터를 배열로 리턴
      function decreasedCaseCentoirds() {
        return gCentroids.filter(v => {
          const arr = v.histories.split('-');
          let prevNumber = 'start';
          const diffNum = arr.filter(c => {
            if (prevNumber === 'start' || Number(prevNumber) <= Number(c)) {
              prevNumber = c;
              return false;
            }
            prevNumber = c;
            return true;
          });
          return diffNum.length >= 1;
        });
      }

      /// 특정 위경도 점으로 표시
      function drawPoint({ lng, lat }) {
        const { x, y } = geoLocToCoord({ lat, lng });
        console.log(x, y);
        ctx.beginPath();

        ctx.arc(x, y, centPointSize, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.strokeStyle = 'black';
        ctx.fillStyle = 'yellow';
        ctx.fill();
        ctx.closePath();
      }

      /// play() 실행할때 미리 그려진 클러스터들을 지우고 할것인지(gResetOpt === true)
      function changeResetOpt() {
        gResetOpt = !gResetOpt;
        console.log(gResetOpt);
      }
    </script>
  </head>
  <body style="margin: 0">
    <canvas id="spotCanvas" width="4800" height="4800" margin> </canvas>
    <canvas
      id="clickCheckCanvas"
      width="4800"
      height="4800"
      style="position: absolute; top: 0; left: 0"
    >
    </canvas>
    <canvas
      id="historyCanvas"
      width="4800"
      height="4800"
      style="position: absolute; top: 0; left: 0"
      onClick="clickCanvas(window.event)"
    >
    </canvas>

    <script>
      spotCanvas = document.getElementById('spotCanvas'); /// 요소가 표시되는 캔버스
      historyCanvas = document.getElementById('historyCanvas'); /// 클러스터 관련 캔버스
      clickCheckCanvas = document.getElementById('clickCheckCanvas'); /// 마우스 클릭과 관련된 캔버스
      ctx = spotCanvas.getContext('2d');
      historyCtx = historyCanvas.getContext('2d');
      clickCheckCtx = clickCheckCanvas.getContext('2d');
      console.log(clickCheckCtx);
    </script>
  </body>
</html>
