<html>
  <!-- sseKey는 deprecated됨. accessToken에 포함된 userId로 클라이언트를 구별함, EventSource 생성하는단계에서 Authorization 헤더도 포함해야 하므로 본 스크립트는 정상동작하지 않음 -->
  <head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  </head>
  <body>
    <div>
      <h3>[company] userId: 3</h3>
      <div id="companyConsoles">
        <button id="companyConnectBtn" style="display: block">
          sse connect
        </button>

        <input
          id="cpApiNameForGetMessage"
          type="text"
          placeholder="apiName for GetMessage "
          value=""
        />
        <button id="cpGetMessageBtn">getMessage</button>
        <span id="cpGetMessageResult"></span> <br />

        <input
          id="sendToUserFromCompany"
          type="text"
          placeholder="from company send to.. <userId>"
          value="1"
        />
        <button id="cpAnsBookingAvailableBtn">2 answerBookingAvailable</button>

        <br />
      </div>

      <textarea
        name="companySSEEvents"
        id="companySSEEvents"
        cols="80"
        rows="20"
      ></textarea>
    </div>

    <div id="seprator" style="display: block; width: 100%; height: 200px"></div>

    <div>
      <h3>[customer] userId: 1</h3>
      <div id="customerConsoles">
        <button id="customerConnectBtn" style="display: block">
          sse connect
        </button>

        <input
          id="csApiNameForGetMessage"
          type="text"
          placeholder="apiName for GetMessage "
          value=""
        />
        <button id="csGetMessageBtn">getMessage</button>
        <span id="csGetMessageResult"></span> <br />

        <input
          id="sendToUserFromCustomer"
          type="text"
          placeholder="from customer send to.. <userId>"
          value="3"
        />
        <button id="csCallAskBookingAvailableBtn">1 askBookingAvailable</button>
        <span id="askBookingAvailableCallParam"></span>
        <br />
      </div>

      <textarea
        name="customerSSEEvents"
        id="customerSSEEvents"
        cols="80"
        rows="20"
      ></textarea>
    </div>

    <script>
      const context = params => {
        let es;
        const { userType, userId, accessToken } = params;

        server_url = (() => {
          let execute_env = '<%= process.env.EXECUTE_ENV %>';
          if (execute_env === 'dev') return 'https://dev-api.idealbloom.co.kr';
          else if (execute_env === 'prod')
            return 'https://api.idealbloom.co.kr';
          return 'http://localhost:3000';
        })();
        async function initAndConnect() {
          //브라우저가 SSE지원하는지 체크
          if (typeof EventSource == 'undefined') {
            console.log('sse is unsupported');
          }
          console.log('sse is supported');

          if (es) {
            es.close();
          }

          es = new EventSource(`/noti/testSSESubscribe?userId=${userId}`, {
            withCredentials: true,
          });

          es.onopen = async event => {
            // when connection success
            console.log('ready');
            // console.log(event);

            es.onmessage = stream => {
              // when message is received
              const parsedData = JSON.parse(stream.data);
              console.log(parsedData);
            };

            // specific event name test
            es.addEventListener(`userId${userId}`, event => {
              const data = JSON.parse(event.data);
              const prevChat = companyTextarea.val();
              companyTextarea.val(`${prevChat}\n${data.message}`);
            });
          };

          es.onerror = error => {
            // when an error occurs

            console.error('error', error);
          };
        }
        return initAndConnect;
      };

      function contextSwitch(type) {
        if (type === 'customer') {
          accessToken = 'Bearer <%=process.env.testUserAccessToken1%>';
          userType = 'customer';
          customerUserId = '1';
          return context({
            userType,
            userId: customerUserId,
            accessToken,
          });
        }
        accessToken = `Bearer <%=process.env.testUserAccessToken2%>`;
        userType = 'company';
        companyUserId = '3';
        return context({
          userType,
          userId: companyUserId,
          accessToken,
        });
      }

      async function callAskBookingAvailable() {
        console.log(
          `call askBookingAvailable to userId ${$(
            'input#sendToUserFromCustomer',
          ).val()}...`,
        );

        var myHeaders = new Headers();
        myHeaders.append('Content-Type', 'application/json');
        myHeaders.append('Authorization', accessToken);

        const callParams = {
          date: new Date().toISOString(),
          numOfPeople: 2,
          toUserId: $('input#sendToUserFromCustomer').val(),
        };
        const askBookingAvailableResponse = await fetch(
          `${server_url}/noti/askBookingAvailable`,
          {
            method: 'POST',
            headers: myHeaders,
            redirect: 'follow',
            body: JSON.stringify(callParams),
          },
        );
        $('#askBookingAvailableCallParam').text(JSON.stringify(callParams));
        const data = await askBookingAvailableResponse.json();
        return data;
      }

      async function callGetMessage(params) {
        const { apiName, fromUserId } = params;
        console.log(
          `call answerBookingAvailable to userId ${$(
            'input#sendToUserFromCompany',
          ).val()}...`,
        );
        var myHeaders = new Headers();
        myHeaders.append('Content-Type', 'application/json');
        myHeaders.append('Authorization', accessToken);

        const getMessageResponse = await fetch(
          `${server_url}/noti/getMessage`,
          {
            method: 'POST',
            headers: myHeaders,
            redirect: 'follow',
            body: JSON.stringify({
              apiName: 'askBookingAvailable',
              fromUserId,
            }),
          },
        );
        const data = await getMessageResponse.json();
        return data;
      }

      $(document).ready(() => {
        companyTextarea = $('#companySSEEvents');
        customerTextarea = $('#customerSSEEvents');
        $('#customerConnectBtn').on('click', async () => {
          console.log('customer');
          contextSwitch('customer');
          const initAndConnect = contextSwitch('customer');
          await initAndConnect();
        });
        $('#csGetMessageBtn').on('click', async () => {
          contextSwitch('customer');
          const callParams = {
            apiName: $('input#csApiNameForGetMessage').val(),
            fromUserId: companyUserId,
          };
          const getMessageResult = await callGetMessage(callParams);
          console.log(getMessageResult);
          $('#csGetMessageResult').text(JSON.stringify(callParams));
        });
        $('#companyConnectBtn').on('click', async () => {
          console.log('company');
          const initAndConnect = contextSwitch('company');

          await initAndConnect();
        });
        $('#cpGetMessageBtn').on('click', async () => {
          contextSwitch('company');
          const callParams = {
            apiName: $('input#cpApiNameForGetMessage').val(),
            fromUserId: customerUserId,
          };
          const getMessageResult = await callGetMessage(callParams);
          console.log(getMessageResult);
          $('#cpGetMessageResult').text(JSON.stringify(callParams));
        });

        $('#sendToUserFromCompany').on('keypress', () => {
          sendToUserFromCompany = $('#sendToUserFromCompany').val();
          console.log(sendToUserFromCompany);
        });
        $('#sendToUserFromCustomer').on('keypress', () => {
          sendToUserFromCustomer = $('#sendToUserFromCustomer').val();
          console.log(sendToUserFromCustomer);
        });

        $('#csCallAskBookingAvailableBtn').on('click', async () => {
          contextSwitch('customer');
          const result = await callAskBookingAvailable();
        });

        $('#cpAnsBookingAvailableBtn').on('click', async () => {
          await callAnsBookingAvailable();
        });
      });
    </script>
  </body>
</html>
