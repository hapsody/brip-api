// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserType {
  COMMON
  CREATOR
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique /// 로그인시 사용될 email 형태의 id ex) "hawaii@gmail.com"
  password         String /// 로그인시 사용될 비밀번호, 조합 규칙은 영문자/숫자+특수기호 20자리까지, 영문자/숫자는 반드시 포함되어야 하며, '₩'와 '\'와 공백을 제외한 특수기호는 인정은 하지만 반드시 포함은 아님. ex) "qwer1234"
  pwLastUpdateDate DateTime  @default(now()) /// 비밀번호 변경 주기를 확인하기 위해 가장 마지막 비밀번호 업데이트일을 기록한다.
  pwExpireDate     DateTime? /// 임시비밀번호로 리셋된 경우 해당 필드에 만료일 값을 갖는다. 
  phone            String /// 국제번호를 포함하고 '-' 기호를 제외한 문자 형태의 숫자 , ex) +821012345678
  nickName         String /// 사용할 닉네임, 20자 제한 ex) 유쾌한인어
  countryCode      String /// 두글자 ISO Country Code 기준 https://countrycode.org/ 대문자로 한정 ex) KR, US
  userTokenId      String    @unique /// 비회원이었을 시절의 유저 토큰 payload중 tokenId 값, 이것으로 비회원 이었을때의 데이터가 회원 데이터로 승계된다. ex) 2, 727
  // queryParams QueryParams[]
  profileImg       String?

  questionTicket                  QuestionTicket[]
  businessQuestionTicket          BusinessQuestionTicket[]
  tripCreator                     TripCreator[]
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @default(now()) @updatedAt
  UserPasswordHistory             UserPasswordHistory[]
  FavoriteTravelType              FavoriteTravelType?
  TripMemoryGroup                 TripMemoryGroup[]
  TripMemoryTag                   TripMemoryTag[]
  TripMemory                      TripMemory[]
  ShareTripMemory                 ShareTripMemory[]                 @relation("author")
  ReplyForShareTripMemory         ReplyForShareTripMemory[]
  NotiNewCommentOnShareTripMemory NotiNewCommentOnShareTripMemory[]
  likeShareTripMemory             ShareTripMemory[]                 @relation("likeFrom")
  likeTourPlace                   TourPlace[]
  IBEventApplication              IBEventApplication[]
  adPlace                         AdPlace[]
  myChatLog                       UserChatLog[]                     @relation("FromUserChat")
  ToUserChatLog                   UserChatLog[]                     @relation("ToUserChat")
  // customerBookingInfo             BookingInfo[]                     @relation("customer")
  // companyBookingInfo              BookingInfo[]                     @relation("company")
  asCompanyBI                     BookingInfo[]                     @relation("asCustomer")
  asCustomerBI                    BookingInfo[]                     @relation("asCompany")
}

model FavoriteTravelType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  season    String @default("dontcare") /// 선호하는 여행시기 복수선택 가능 ex) "spring, summer, autumn, winter, dontcare"
  dest      String @default("dontcare") /// 선호하는 목적지 날씨 복수선택 가능 ex) "tropical(열대), dry(건조), temperate(온대), polar(냉대), warm(한대), dontcare" 
  trip      String @default("dontcare") /// 선호하는 여행타입 복수선택 가능 ex) "free(자유여행), package(패키지), food(먹거리), luxury(럭셔리), privateActivity(개인 액티비티), groupActivity(그룹 액티비티), shopping(쇼핑), resort(호캉스/리조트), visit(명소방문), landscape(자연경관), waterpark(워터파크), ocean(해수욕), dontcare"
  activity  String @default("dontcare") /// 선호하는 액티비티 타입 복수선택 가능 ex) "surfing(서핑), skyDiving(스카이 다이빙), scubaDiving(스쿠버다이빙), tracking(트랙킹), bicycle(자전거), bike(바이크), climbing(등산), swimming(수영), ski(스키/보드), golf(골프), snorkling(스노클링), etc(기타), dontcare(상관없음)"
  companion String @default("dontcare") /// 선호하는 동반자 타입 복수선택 가능 ex) "family(가족), lover(연인), friend(친구), alone(혼자), circle(소모임), traveler(여행중 만난사람), dontcare(상관없음)"
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
}

// enum OPENINGHOURS {
//   OPEN_NOW
// }

// gl, vj 필드 삭제
// model GglPhotos {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   height            Int?
//   width             Int?
//   html_attributions String? /// 구글 사진은 유저들이 촬영하거나 장소의 소유자 및 담당자가 올린 것으로 해당 사진의 출처를 나타내는 attribute ex) "<a href=\"https://maps.google.com/maps/contrib/110378461997733115112\">A Google User</a>"
//   photo_reference   String /// https://maps.googleapis.com/maps/api/place/photo?maxheight=420&photo_reference=<photo_reference> 로 요청할때 필요한 photo_reference.   ex) AcYSjRjZms48ZpgsVFfCrPG27i...
//   url               String? /// photo_reference를 이용해 google photo_detail api 요청 응답값 (url). 바로 직접 접근이 가능한 사진 url은 이것이다. ex) https://lh3.googleusercontent.com/places/AM5lPC9BIx8UPtnmfCJmpPboFYBg7Ah5Mwsj-K4CuyEZFoqAxSSwZYimCn1Bvl8cYRDLzxoudSBWkzFIUicmJhpvYcXVLezWhBcaF8M=s1600-w1200
//   TourPlace         TourPlace? @relation(name: "GooglePhotos", fields: [tourPlaceId], references: [id])
//   tourPlaceId       Int?
//   // shareTripMemTP    TourPlace? @relation(name: "ShareTripMemoryTourPlacePhotos", fields: [shareTripMemTPId], references: [id])
//   // shareTripMemTPId  Int?
// }

// model GglNearbySearchResType {
//   id        Int         @id @default(autoincrement())
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @default(now()) @updatedAt
//   value     String      @unique
//   tourPlace TourPlace[]
// }

/// tourPlace는 Batch 스크립트등을 통해 수집되는데 수집된 데이터는 바로 TourPlace 를 덮어 씌우지 않고 DataStageStatus 단계로 나뉘어 관리된다.
enum DataStageStatus {
  NEW /// 새로 수집된 데이터, 이후 사용승인이 나야 IN_USE 단계로 넘어갈수 있다.
  USER_CREATE_NEW /// 유저를 통해(shareTripMemory) 새로 등록된 데이터
  APPROVED /// 사용 승인됨 IN_USE 되기 전 단계
  IN_USE ///  사용중인 데이터
  ARCHIVED /// 사용하다가 새로 업데이트된 데이터로 옮겨가고 보관중인 데이터
  DUPLICATED /// 중복 검사시점에 IN_USE 데이터들과 중복으로 판정되어 상태변경된 레코드
}

/// idealbloom 이미지 
model IBPhotos {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  key               String? /// s3 key path
  url               String?          @db.Text /// 직접접근이 가능한 url이 있을 경우
  tourPlace         TourPlace?       @relation(fields: [tourPlaceId], references: [id])
  tourPlaceId       Int?
  Hotel             Hotel?           @relation(fields: [hotelId], references: [id])
  hotelId           Int?
  photoMetaInfo     IBPhotoMetaInfo?
  ShareTripMemory   ShareTripMemory? @relation(fields: [shareTripMemoryId], references: [id])
  shareTripMemoryId Int?
  tripMemory        TripMemory?      @relation(fields: [tripMemoryId], references: [id])
  tripMemoryId      Int?

  adPlace   AdPlace? @relation(fields: [adPlaceId], references: [id])
  adPlaceId Int?
}

enum IBPhotoMetaInfoType {
  MAIN
  DETAIL
  SUB
}

/// 사진 메타 정보
model IBPhotoMetaInfo {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
  type      IBPhotoMetaInfoType
  order     Int                  @default(0)
  /// common fields
  title     String /// MAIN일 경우 장소명, 업체명, 위치명, DETAIL 타입일 경우 이미지를 설명할수 있는 서브타이틀(메뉴판, 안내도 등), SUB 타입일 경우 서브 타이틀
  lat       Float?
  lng       Float?
  shotTime  DateTime? /// 
  feature   TripMemoryCategory[] /// ex) MAIN: 가족친화적, 연인 친화적, SUB: view, direction, etc

  /// for only DETAIL, SUB fields
  keyword IBPhotoTag[] /// Hash Tag ex) 

  /// for only MAIN fields
  eval String? /// ex) 적극 추천, 추천, 비추천
  desc String? @db.Text /// 장소설명 (2줄))

  /// for DETAIL fields
  publicInfo String? /// Price, Open/Close hour, contact info, etc

  photo   IBPhotos @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoId Int      @unique
}

/// PhotoMetaInfo Tag
model IBPhotoTag {
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
  name       String            @unique
  tripMemory IBPhotoMetaInfo[]

  @@index([name])
}

/// 구글, 관광공사, booking.com 등 여러가지 다양한 유형의 관광지관련 포맷데이터를 관리하는 모델
// tourPlace는 일정 생성이 요청되면(getRecommendList 수행중에 생성된다.)
// 데이터 테이블(GglNearbySearchRes, SearchHotelRes, VisitJejuData 등)은 데이터 수집시에 생성되며, 일정 생성 요청이 들어오면 QueryParams 생성과 함께 요청 파라미터에 맞는 검색된 데이터 테이블들과의 TourPlace 관계가 생성되고 이 TourPlace들과 QueryParams가 연결된다.
// 1. 즉 하나의 TourPlace는 다수의 QueryParams와 관계될수 없으며,
// 2. QueryParams는 다수 검색된 결과를 가질수 있으므로 N개의 TourPlace와 관계될수 있다.
// 3. 또한 하나의 TourPlace는 여러 데이터 테이블(GglNearbySearchRes, SearchHotelRes, VisitJejuData 등)중 하나의 데이터와 관계 형성이 된다.
// 4. 반대로 GglNearbySearchRes, SearchHotelRes, VisitJejuData 등의 테이블들은 다수의 TourPlace 와의 관계가 형성된다
model TourPlace {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  tourPlaceType PlaceType
  visitSchedule VisitSchedule[]
  queryParams   QueryParams[]
  status        DataStageStatus @default(NEW)
  // evalScore                             Int             @default(0) /// deprecated
  // minDifficulty                         Int? /// deprecated ibTravelTag의 minDifficulty가 대신하고 있음
  // maxDifficulty                         Int? /// deprecated ibTravelTag의 maxDifficulty가 대신하고 있음
  ibTravelTag   IBTravelTag[]

  /// gl, vj 필드 삭제
  // /// google place result format
  // gl_lat                   Float?
  // gl_lng                   Float?
  // gl_viewport_ne_lat       Float?
  // gl_viewport_ne_lng       Float?
  // gl_viewport_sw_lat       Float?
  // gl_viewport_sw_lng       Float?
  // gl_icon                  String?
  // gl_icon_background_color String?
  // gl_icon_mask_base_uri    String?
  // gl_name                  String? /// 검색된 장소 이름 
  // gl_opening_hours         Boolean? /// 검색시각 기준으로 현재 영업 상태인지
  // // opening_periods       String? /// 오픈 클로즈 시간 ex)
  // // weekday_text          String? /// 일주일 기준 영업일 ex) 
  gl_place_id String? /// 구글이 부여한 place의 고유값
  // gl_price_level           Int? /// 구글이 부여한 가격 레벨, 0-4
  // gl_rating                Float? /// 별점, 0-5 
  // gl_types                 GglNearbySearchResType[] /// 장소 타입, 문서참조: https://developers.google.com/maps/documentation/places/web-service/supported_types?hl=ko#table2
  // gl_user_ratings_total    Int? /// 별점을 준 유저수
  // gl_vicinity              String? /// nearbySearch 검색시에 주소
  // gl_formatted_address     String?                  @db.Text /// textSearch 검색시에 주소
  // gl_photos GglPhotos[] @relation("GooglePhotos") /// 장소 사진 url

  /// gl, vj 필드 삭제
  // /// visitJeju result format
  // // vj_alltag          VisitJejuTag[] /// 관련 태그 전체 ex) 일출,오름,경관/포토,부모,공용주차장,현금결제,카드결제
  vj_contentsid String? /// 콘텐츠 ID ex) CONT_000000000500349
  // // contentscd   VisitJejuClassCode; /// 콘텐츠 코드
  // vj_contentscdValue String? /// 콘텐츠 코드 값, ex) c1
  // vj_contentscdLabel String? /// 콘텐츠 코드 라벨 ex) 관광지
  // vj_contentscdRefId String? /// 콘텐츠 코드 Reference ID, ex) contentscd>c1
  // vj_title           String? /// 콘텐츠명 ex) 성산일출봉(UNESCO 세계자연유산)
  // // vj_region1cd   VisitJejuClassCode /// 1차 지역코드
  // vj_region1cdValue  String? /// 1차 지역코드 값, ex) region2
  // vj_region1cdLabel  String? /// 1차 지역코드 라벨, ex) 서귀포시
  // vj_region1cdRefId  String? /// 1차 지역코드 레퍼런스 ID, ex) region>region2
  // // vj_region2cd   VisitJejuClassCode /// 2차 지역코드
  // vj_region2cdValue  String? /// 1차 지역코드 값, ex) 17
  // vj_region2cdLabel  String? /// 1차 지역코드 라벨, ex) 성산
  // vj_region2cdRefId  String? /// 1차 지역코드 레퍼런스 ID, ex) region2>17
  // vj_address         String? /// 주소 ex) 제주특별자치도 서귀포시 성산읍 성산리 1
  // vj_roadaddress     String? /// 도로명 주소 ex) 제주특별자치도 서귀포시 성산읍 일출로 284-12
  // vj_introduction    String?        @db.Text /// 간단소개 ex) 바다위에 우뚝 솟아난 수성화산·유네스코 세계자연유산, 천연기념물 제420호, 올레1코스
  // vj_latitude        Float? /// 위도 ex) 33.462147
  // vj_longitude       Float? /// 경도 ex) 126.936424
  // vj_postcode        String? /// 우편번호 ex) 63643
  // vj_phoneno         String? /// 전화번호 ex) 064-783-0959
  // vj_tag VisitJejuTag[] /// 태그 ex) 일출,오름,경관/포토,부모

  /// 공통 필수 필드
  title         String /// 장소 이름
  lat           Float /// 위도
  lng           Float /// 경도
  address       String?    @db.Text /// 지번주소
  roadAddress   String?    @db.Text /// 도로명주소
  detailAddress String?    @db.Text /// 존재할경우 상세주소
  /// 공통 옵션 필드
  openWeek      String?    @db.Text /// 영업시간, 영업요일 ex) Mon: 09:00~20:00, Tue: 09:00~20:00, ...
  contact       String? /// 연락처 ex) +82-02-123-4567, +82-10-2055-1234
  postcode      String? /// 우편번호
  photos        IBPhotos[] /// 사진
  rating        Float      @default(0) /// 평점 0~5
  desc          String?    @db.Text /// 장소 소개설명
  regionCode1   String?    @db.Char(16) /// 상위 지역
  regionCode2   String?    @db.Char(32) /// 하위 세부 지역
  nationalCode  String     @default("82") @db.Char(7)

  batchQueryParams     BatchQueryParams?   @relation(fields: [batchQueryParamsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  batchQueryParamsId   Int? /// batchJob을 통해 수집된 데이터라면 batchJobId가 존재한다. 한번의 batchJob을 통해 생성된 데이터는 같은 번호를 공유한다.
  batchSearchKeyword   BatchSearchKeyword? @relation(fields: [batchSearchKeywordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  batchSearchKeywordId Int?
  validCluster         ValidCluster[]
  tripMemory           TripMemory[]
  shareTripMemory      ShareTripMemory[]
  likeFrom             User[]

  good      Int      @default(0) /// 적극 추천해요를 받은 누적 숫자
  notBad    Int      @default(0) /// 괜찮아요를 받은 누적 숫자
  bad       Int      @default(0) /// 추천하지 않아요를 받은 누적 숫자
  like      Int      @default(0) /// 장소 좋아요를 받은 누적 숫자.
  // @@index([gl_place_id, vj_contentsid])
  // GglNearbySearchResType   GglNearbySearchResType? @relation(fields: [gglNearbySearchResTypeId], references: [id])
  // gglNearbySearchResTypeId Int?
  adPlace   AdPlace? @relation(fields: [adPlaceId], references: [id])
  adPlaceId Int?

  @@index([lat, lng, id])
  @@index([nationalCode, regionCode1, id])
  @@index([nationalCode, regionCode1, regionCode2, id])
}

model Hotel {
  id                                    Int             @id @default(autoincrement())
  createdAt                             DateTime        @default(now())
  updatedAt                             DateTime        @default(now()) @updatedAt
  hotelType                             HotelType
  status                                DataStageStatus @default(NEW)
  queryParams                           QueryParams[]
  visitSchedule                         VisitSchedule[]
  bkc_unit_configuration_label          String?         @db.Text /// room name and description, ex) Standard Queen Room<br/><b>Private room</b>: 2 beds
  bkc_min_total_price                   Float? /// ex) 572.61373972
  bkc_gross_amount_per_night            Float? /// ex) 1박당 요금 = min_total_price / 여행박수
  bkc_gross_amount                      Float? /// 총액, 부가세등의 세금과, 할인 금액을 계산한 최종 지불금액 ex) 572.61373972
  bkc_included_taxes_and_charges_amount Float? /// 세금 포함한 금액
  bkc_net_amount                        Float? /// 순액
  // all_inclusive_amount              Float /// 모두 포함한 금액 (?) <= 결과값으로 미루어 총액과 대부분 동일했음
  bkc_hotelClass                        Int? /// 호텔 성급 ex) 3
  bkc_countrycode                       String? /// ex) en
  bkc_default_language                  String? /// ex) xu
  bkc_address                           String? /// ex) 92-161 Waipahe Place
  bkc_city                              String? /// ex) "Waianae",
  bkc_city_name_en                      String? /// ex) "Waianae",
  bkc_checkin                           String? /// ex) {"until":"11:00","from":"10:00"}
  bkc_checkout                          String? /// ex) {"until":"11:00","from":"10:00"}
  bkc_distance                          Float? /// search한 geo location으로부터 거리 ex) 5.62
  bkc_review_score_word                 String? /// ex) Wonderful
  bkc_review_score                      Float? /// ex) 8.2
  // bkc_currency                String /// ex) USD
  bkc_currency_code                     String? /// ex) USD
  bkc_timezone                          String? /// ex) "Pacific/Honolulu",
  bkc_urgency_message                   String? ///ex) "Only 1 left at this price on Booking.com"
  bkc_hotel_id                          Int? /// ex) 174704674
  // hotel_name_trans     String /// 호텔이름으로 보임 ex) "Marriott's Ko Olina Beach Club"
  bkc_hotel_name                        String? ///  ex) Marriott's Ko Olina Beach Club
  bkc_latitude                          Float? /// 호텔 위도 ex) 21.3307348165897
  bkc_longitude                         Float? /// 호텔 경도 ex) -158.121508732438
  bkc_url                               String? /// booking.com 예약 페이지 ex) https://www.booking.com/hotel/us/marriott-s-ko-olina-beach-club.html
  bkc_accommodation_type_name           String? /// ex) Resort, Hotel, Homestay, Vacation Home, etc ...
  bkc_zip                               String? /// ex) HI 96792
  bkc_main_photo_url                    String? /// 대문 썸네일 ex) https://cf.bstatic.com/xdata/images/hotel/square60/280522794.jpg
  bkc_max_photo_url                     String? /// ex) https://cf.bstatic.com/xdata/images/hotel/max1280x900/280522794.jpg?k=bb16655bb4b95d3e5fdefaf39c1fbe4b1150e7eb3062b92eb635ad20b00404fb&o=
  bkc_hotel_facilities                  String?         @db.Text /// ex) "160,467,502,96,220,75,446,498,485,490,484,2,486,444,65,445,450,20,195,458,494,124,3,72,495,488,301,457,4,456,224,434,435,145,225,503,419,185,11,420,497,184,454,436,455,109,468,437,440,496,51,460,448,433,23,441,179,505,504,7,461,104,493,459,421,48,442,439,47,506,107,25,499,422,81,108,451,492,28,253,449,222,305,182,489,16,22,8,491,159,418,161,80,49,443,117"
  // bkc_has_swimming_pool       Int /// ex) 1  

  /// 공통 필수 필드
  title       String /// 장소 이름
  lat         Float /// 위도
  lng         Float /// 경도
  address     String?    @db.Text /// 지번주소
  roadAddress String?    @db.Text /// 도로명주소
  /// 공통 옵션 필드
  // openWeek     String?    @db.Text /// 영업시간, 영업요일 ex) Mon: 09:00~20:00, Tue: 09:00~20:00, ...
  contact     String? /// 연락처 ex) +82-02-123-4567, +82-10-2055-1234
  postcode    String? /// 우편번호
  photos      IBPhotos[] /// 사진
  rating      Float      @default(0) /// 평점 0~5
  desc        String?    @db.Text /// 장소 소개설명
}

model BatchQueryParams {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now()) @updatedAt
  latitude      Float?
  longitude     Float?
  radius        Float?
  // keyword           String?
  searchkeyword BatchSearchKeyword[]
  // gglNearbySearchRes GglNearbySearchRes[]
  // visitJejuData      VisitJejuData[]
  // searchHotelRes     SearchHotelRes[]
  tourPlace     TourPlace[]
}

model BatchSearchKeyword {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  keyword          String             @unique
  batchQueryParams BatchQueryParams[]
  // gglNearbysearchRes GglNearbySearchRes[]
  // visitJejuData      VisitJejuData[]
  // searchHotelRes     SearchHotelRes[]
  tourPlace        TourPlace[]
}

// enum Companion {
//   ALONE
//   FAMILY
//   FRIEND
//   NOTYET
// }

// enum FamilyOpt {
//   INFANT
//   CHILDREN
//   TEENAGER
// }

/// 유저가 일정 생성을 요청했을때 입력한 값을 갖는 모델
model QueryParams {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  minMoney   Int?
  maxMoney   Int?
  startDate  DateTime?
  endDate    DateTime?
  adult      Int?
  child      Int?
  infant     Int? /// 5세 미만
  roomNumber Int?
  // travelHard Int?

  ingNow    String? /// 현재 여행중인지 여부 ex) "ing", "preStep"
  companion String? ///  일행이 있는지 여부 ex) 'alone', 'family', 'friend', 'notYet'
  familyOpt String? ///  가족 동반자 타입 ex) ['infant', 'children', 'teenager'] # infant : 5세 미만 또는 어린이 포함, # children: 초등학생 포함, # teenager: 중/고생 포함
  minFriend Int? ///  친구 동반자 최소인원 ex) "5"
  maxFriend Int? /// 친구 동반자 최대 인원 ex) "7"

  period      Int? /// 여행기간 ex) '3'
  travelType  String? /// 여행의 컨셉, 타입 ex) ['rest', 'healing', 'natureEx', 'learnEx', 'seeing', 'meeting', 'activity', 'food', 'explore']
  destination String? ///  이미 정해진 여행지의 여부 ex) "recommend", "alreadyDecided"
  travelHard  Int? /// 여행강도 ex) "5"

  tourPlace        TourPlace[] /// 일쩡에 대응하는 주변 관광지와 식당 후보지 검색 결과 검색 결과
  hotel            Hotel[] /// 일정에 대응되어 검색된 호텔 
  metaScheduleInfo MetaScheduleInfo? /// 스케쥴 생성 후 검색결과와 파생 계산된 스케쥴 결과에 대한 메타 정보
  visitSchedule    VisitSchedule[] /// 스케쥴 생성 후 방문할 곳들에 대한 정보
  userTokenId      String? /// 일정을 생성 요청한 유저의 고유 유저 토큰 아이디
  // scheduleTitle             String? /// 생성한 일정을 '저장까지' 완료하면 유저가 작성한 title이 부여된다, null 값이라면 일정은 생성은 요청되어 생성되었으나 유저가 저장을 결정하지 않은 상태다.
  // scheduleThumbnail           String? /// 생성한 일정을 '저장까지' 완료하면 유저에게 보여질 대표 썸네일 null 값이라면 일정은 생성은 요청되어 생성되었으나 유저가 저장을 결정하지 않은 상태다.
  // schedulePlanType
  // scheduleHash     String?           @unique /// 스케쥴 생성 후 스케쥴마다 1:1로 부여된 고유한 토큰 값
  savedSchedule    ScheduleBank? /// ScheduleBank는 유저가 생성된 일정을 검토한 후 저장했을 경우 생성되는 모델이다. 유저가 일정을 생성요청 하면 생기는 QueryParams와 1:1 관계를 갖는다. QueryParams가 null이 아닌값을 savedSchedule로 가지면 이는 유저가 해당 일정을 '저장'했다는 뜻이다.
  validCluster     ValidCluster[]
}

/// ScheduleBank는 유저가 생성된 일정을 검토한 후 저장했을 경우 생성되는 모델이다. 유저가 일정을 생성요청 하면 생기는 QueryParams와 1:1 관계를 갖는다. QueryParams가 null이 아닌값을 savedSchedule로 가지면 이는 유저가 해당 일정을 '저장'했다는 뜻이다.
model ScheduleBank {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  title         String /// 생성한 일정을 '저장까지' 완료하면 유저가 작성한 title이 부여된다, null 값이라면 일정은 생성은 요청되어 생성되었으나 유저가 저장을 결정하지 않은 상태다.
  thumbnail     String /// 생성한 일정을 '저장까지' 완료하면 유저에게 보여질 대표 썸네일 null 값이라면 일정은 생성은 요청되어 생성되었으나 유저가 저장을 결정하지 않은 상태다.
  planType      PlanType
  hashTag       ScheduleTag[] /// 일정 저장시 해시태그 ex) 가족여행, 한달살기..
  // scheduleHash  String        @unique /// 스케쥴 생성 후 스케쥴마다 1:1로 부여된 고유한 토큰 값
  userTokenId   String /// 생성된 일정을 저장한 유저의 고유 유저 토큰 아이디
  queryParams   QueryParams   @relation(fields: [queryParamsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queryParamsId Int           @unique
}

/// 개발용 booking.com hotels mock data type 구분용
enum BookingComReqType {
  SEARCH_HOTELS_BY_COORDINATES
  SEARCH_LOCATIONS
  FILTERS_FOR_SEARCH
  SEARCH_HOTELS
}

/// 개발용, booking.com hotel 검색 api 쿼리 비용을 줄이기 위해 mydb에 저장할수 있도록 model을 마련함
model MockBookingDotComHotelResource {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  reqType             BookingComReqType @default(SEARCH_HOTELS_BY_COORDINATES) /// 개발용 booking.com hotels mock data type 구분용
  orderBy             String?
  adultsNumber        Int?
  childrenNumber      Int?
  childrenAges        String?
  roomNumber          Int?
  checkinDate         DateTime?
  checkoutDate        DateTime?
  latitude            Float?
  longitude           Float?
  pageNumber          Float?
  includeAdjacency    Boolean?
  categoriesFilterIds String?
  responseData        String            @db.LongText
}

/// 비회원일 경우도 DB에 저장되는 모든 데이터들의 소유자를 특정할수 있도록 reqNonMembersUserToken api를 통해 tokenId를 payload로 갖는 일종의 accessToken을 부여하는데 그 tokenId번호를 NonMemberCount 모델의 id값으로 삼는다.
model NonMembersCount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

/// 카드 뉴스 1장에 대응하는 모델
model CardNewsContent {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  no              Int /// 카드 컨텐츠 순서
  title           String /// 카드 컨텐츠의 타이틀
  content         String ///  카드 컨텐츠의 내용
  bgPicUri        String        @db.Text /// 카드 컨텐츠의 배경 이미지
  cardNewsGroup   CardNewsGroup @relation(fields: [cardNewsGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cardNewsGroupId Int
  cardTag         CardTag[]
}

/// 각 카드 뉴스 여러장을 갖는 카드 뉴스기사 전체 한편에 대응하는 모델
model CardNewsGroup {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  title           String /// 카드 뉴스 그룹 타이틀
  thumbnailUri    String            @db.Text /// 카드 뉴스 그룹 썸네일 이미지
  cardNewsContent CardNewsContent[] /// 그룹에 속하는 카드 컨텐츠들
  no              Int /// 카드 뉴스 그룹의 번호. 그룹이 연작 시리즈일경우 사용
  // user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // userId          Int

  creator   TripCreator @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId Int
}

model CardTag {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  value           String            @unique
  cardNewsContent CardNewsContent[]
}

model ScheduleTag {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  value        String         @unique
  scheduleBank ScheduleBank[]
}

model MetaScheduleInfo {
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @default(now()) @updatedAt
  totalHotelSearchCount      Int? /// 검색된 호텔들의 수
  totalRestaurantSearchCount Int? /// 검색된 식당의 수, type이 restaurant인 Google 주변검색결과 수다.
  totalSpotSearchCount       Int? /// 검색된 관광지의 수
  spotPerDay                 Float? /// 스케쥴 생성에 설정된 하루에 방문할 관광지 수
  mealPerDay                 Float? /// 스케쥴 생성에 설정된 하루에 방문할 식당 수
  mealSchedule               String? /// 식사 일정,  ex) -1,0,2 
  // -1,0,2 => { breakfast: -1, lunch: 0, dinner: 2 }  라면 아침은 먹지 않고 점심은 그날 일정순서중 0번째, 저녁은 앞에 1곳의 일정을 소화하고 2번째 일정으로 먹게 됨을 의미함. 추가사항은 MealOrder 클래스 코멘트 참조.

  travelNights             Int? /// 여행'박' 수, ex) 1박 2일에서 1를 의미
  travelDays               Int? /// 여행'일' 수, ex) 1박 2일에서 2를 의미
  hotelTransition          Int? /// 여행중 숙소를 몇번 변경할것인지
  transitionTerm           String? /// 여행중 숙소를 몇일마다 바꿀것인지 ex) 5,2 <= 5일머무르고 숙소 이동 후 2일 머무름
  recommendedMinHotelCount Int? /// 검색된 호텔들중 min 여행 경비 범위 안의 호텔들을 추려, 평가 상위에서부터 여행중 필요한 숙소의 수만큼 걸러낸 호텔의 수
  recommendedMidHotelCount Int? /// 검색된 호텔들중 mid 여행 경비 범위 안의 호텔들을 추려, 평가 상위에서부터 여행중 필요한 숙소의 수만큼 걸러낸 호텔의 수
  recommendedMaxHotelCount Int? /// 검색된 호텔들중 max 여행 경비 범위 안의 호텔들을 추려, 평가 상위에서부터 여행중 필요한 숙소의 수만큼 걸러낸 호텔의 수
  // visitSchedulesCount      Int /// 생성된 일정에서 몇일치 코스가 생성됐는지 수
  estimatedCost            Float? /// 예상 여행 비용
  queryParams              QueryParams @relation(fields: [queryParamsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queryParamsId            Int         @unique
}

/// reqSchedule api로 요청되어 추천일정으로 잡힌 호텔 및 장소들 일람. 여기서 유저가 저장하면 scheduleBank에도 등록된다.
model VisitSchedule {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  dayNo        Int /// 본 스케쥴이 x일차 일정인지, 1일부터 시작
  orderNo      Int /// 본 스케쥴이 x일차의 y번째 일정인지, 0번부터 시작
  // planType     PlanType  @default(MIN) /// 본 스케쥴이 최저, 중간, 최대 비용에 의한 추천 호텔중 어디로부터 시작하는 일정인지 기록
  placeType    String? /// 이 장소가 어떤 유형인지 나타냄, HOTEL | RESTAURANT | SPOT
  transitionNo Int? /// 해당 VisitSchedule이 호텔일 경우 몇번째 호텔 이동인지 나타낸다.
  stayPeriod   Int? /// 해당 VisitSchedule이 호텔일 경우 해당 호텔에서 몇박을 체류하는지 나타낸다.
  checkin      DateTime? /// 해당 VisitSchedule이 호텔일 경우 해당 호텔에 checkin 하는 날짜.
  checkout     DateTime? /// 해당 VisitSchedule이 호텔일 경우 해당 호텔에 checkout 하는 날짜.

  tourPlace      TourPlace?    @relation(fields: [tourPlaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourPlaceId    Int?
  queryParams    QueryParams?  @relation(fields: [queryParamsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queryParamsId  Int?
  validCluster   ValidCluster? @relation(fields: [validClusterId], references: [id])
  validClusterId Int?
  hotel          Hotel?        @relation(fields: [hotelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hotelId        Int?
}

/// 여행 경비에 따른 계획 분류 (deprecated)
enum PlanType {
  MIN
  MID
  MAX
}

enum PlaceType {
  // BKC_HOTEL
  GL_RESTAURANT
  GL_SPOT
  VISITJEJU_RESTAURANT
  VISITJEJU_SPOT
  USER_SPOT /// 유저가 개인 장소를 공유하므로써 공개된 장소
  USER_RESTAURANT /// /// 유저가 개인 장소를 공유하므로써 공개된 식당
  USER_PRIV_MEMORY_SPOT /// 유저 기억에서 개인적으로 저장한 장소
  PUBLICDATAPORTAL_RESTAURANT /// 공공데이터 포탈 식당
  PUBLICDATAPORTAL_SPOT /// 공공데이터 포탈 관광지
  TOUR4_SPOT ///한국 관광공사 Tour4.0 api 데이터 
  TOUR4_RESTAURANT
  ADPLACE_SPOT /// 비지니스 등록 업체 장소
  ADPLACE_RESTAURANT /// 비지니스 등록 업체 식당
}

enum HotelType {
  BOOKINGDOTCOM
}

/// 문의사항
model QuestionTicket {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String   @db.LongText
  noti      Boolean  @default(false) /// email 또는 다른 형태의 noti가 관리자에게 성공적으로 되었는지 여부 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
}

/// 사업제휴 문의사항
model BusinessQuestionTicket {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  noti        Boolean  @default(false) /// email 또는 다른 형태의 noti가 관리자에게 성공적으로 되었는지 여부 
  companyName String
  phone       String
  content     String   @db.LongText
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
}

/// 자주묻는 질문 리스트
model FaqList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  question String
  answer   String @db.Text
}

/// TripCreator의 domain 숫자 배열의 분야 정의값
enum CreatorDomain {
  TOUR
  ACTIVITY
  HIKING
  HONEYMOON
  GOLF
  PACKAGE
  EXPERIENCE
  GROUPACTIVITY
}

enum CreatorStatus {
  APPLIED /// 요청상태. 사용자로부터 creator 신청만 된 상태
  APPROVED /// 크리에이터 승인됨.
  REJECTED /// 크리에이터 가입 거절
}

/// 여행 크리에이터 신청목록.
model TripCreator {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  status        CreatorStatus   @default(APPLIED)
  noti          Boolean         @default(false) /// email 또는 다른 형태의 noti가 관리자에게 성공적으로 되었는지 여부 
  nickName      String          @unique /// creator 닉네임, 공백 허용x
  // phone         String /// creator 연락처 ex) 01020202121
  area          String /// 전문지역
  // proposal      String          @db.Text /// 제휴 내용
  domain        String /// 전문 영역 선택 선택한 분야에 해당하는 숫자 배열 스트링 ex) "5,1,33,17,..."
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int
  cardNewsGroup CardNewsGroup[]
}

// gl, vj 필드 삭제 
// /// VisitJejuData에서 활용할 Tag 모델
// model VisitJejuTag {
//   id        Int         @id @default(autoincrement())
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @default(now()) @updatedAt
//   value     String      @unique ///ex) 일출,오름,경관/포토,부모,공용주차장,현금결제,
//   tourPlace TourPlace[]
// }

/// idealbloom에서 자체 정의하는 여행타입. 
model IBTravelTag {
  id            Int                       @id @default(autoincrement())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @default(now()) @updatedAt
  minDifficulty Int? /// 본 타입이 갖는 여행강도 레벨
  maxDifficulty Int?
  value         String                    @unique
  related       RModelBetweenTravelType[] @relation("Sub")
  noPtr         RModelBetweenTravelType[] @relation("Super") /// super 관계로는 IBTravelTag 쪽에서 접근하지 않는것을 원칙으로 한다.RModelBetweenTravelType 쪽에서만 접근 가능한 단방향 관계이다.
  tourPlace     TourPlace[]
  AdPlace       AdPlace[]

  @@index([minDifficulty, maxDifficulty, id])
}

/// IBTravelTag 간에 관계 정의
model RModelBetweenTravelType {
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  to        IBTravelTag @relation(name: "Super", fields: [toId], references: [id])
  toId      Int
  from      IBTravelTag @relation(name: "Sub", fields: [fromId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromId    Int

  @@id([fromId, toId])
  @@unique([fromId, toId])
}

/// 일정 생성 요청에 의해 형성된 클러스터 결과를 저장하는 모델
model ValidCluster {
  id                      Int             @id @default(autoincrement())
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @default(now()) @updatedAt
  lat                     Float
  lng                     Float
  transitionNo            Int /// 해당 클러스터에서 검색할 지역이 전체 여행중 몇번째 숙소 검색인지 나타내는 값(몇번째 군집인지와 일치함)
  superClusterNo          Int /// 최초에 clustering 결과로 각 클러스터가 속한 숙소검색군을 표시한다.(superCluster 구분과 동일하며 유저가 호텔 정보를 변경하면 transitionNo는 변할수 있어도 superClusterNo는 불변함. 단지 구분번호이며 절대적인 id값은 아니다.)
  stayPeriod              Int /// 검색한 숙소에서 며칠을 머무를지
  checkin                 DateTime /// 검색한 숙소에 체크인할 날짜
  checkout                DateTime /// 검색한 숙소에 체크아웃할 날짜
  numOfVisitSpotInCluster Int /// 해당 클러스터에서 체류 기간중 방문해야할 여행지 수
  ratio                   Float /// 해당 숙소에서(해당 클러스터에서) 방문할 여행지들이 전체 방문할 여행지들 수에서 차지하는 비율. 이 수치들을 군집별로 비교하여 전체 여행일정중 각각의 군집군에서 체류할 기간들을 결정한다. ex) 전체 일정 20일 중 ratio가 clusterA: 0.4, clusterB: 0.2, clusterC: 0.4일 경우 각각 8일, 4일, 8일을 머무르는 일정을 갖게 된다.
  queryParams             QueryParams     @relation(fields: [queryParamsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queryParamsId           Int
  tourPlace               TourPlace[]
  visitSchedule           VisitSchedule[]
}

/// 일정 생성 요청에 의해 형성된 클러스터 결과를 저장하는 모델
model SMSAuthCode {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  code        String
  phone       String
  userTokenId String
}

/// 유저의 사용하였던 비밀번호 변경 내역. 유저가 비밀번호 변경시에 과거 변경 내역을 조회하기 위해 기록한다.
model UserPasswordHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  password  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

/// 유저가 방문한 장소에 남긴 '기억'들의 그룹
model TripMemoryGroup {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  name       String /// 기억그룹 이름
  startDate  DateTime? /// 그룹에 속한 날짜들중 가장 오래된 날짜
  endDate    DateTime? /// 그룹에 속한 날짜들중 가장 최근 날짜
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) /// 그룹은 만든 유저를 반드시 갖는다.
  userId     Int
  // share        Boolean        @default(false) /// 기억을 공유할지 말지여부 공유하지 않으면 유저만 조회할수 있다.
  tripMemory TripMemory[] /// 기억그룹에 속한 기억들 1:N 관계를 갖는다.

  @@unique([name, userId])
}

/// 유저는 장소를 방문하고 개인적인 기록을 '기억'으로 남길수 있다.
model TripMemory {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  title       String /// 기억 타이틀. 스팟 데이터에 존재 하지 않던 위치를 잡을 경우 해당 타이틀이 공유 기억장소의 이름으로 나타난다.
  comment     String          @db.Text
  lat         Float /// tourPlace가 가지는 latitude와 동일한 값이다. 그러나 tourPlace의 데이터가 업데이트됨에 따라 기존 저장하였던 위치를 따로 기억할 필요가 있다.
  lng         Float /// tourPlace가 가지는 longitude와 동일한 값이다. 그러나 tourPlace의 데이터가 업데이트됨에 따라 기존 저장하였던 위치를 따로 기억할 필요가 있다.
  address     String?         @db.Text /// tourPlace가 주소값과 동일해야한다. 그러나 tourPlace의 데이터가 업데이트됨에 따라 기존 저장하였던 위치를 따로 기억할 필요가 있다.
  tag         TripMemoryTag[] /// 기억에 태그한 해시태그들.
  img         String /// 기억 사진
  group       TripMemoryGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade) /// '기억'이 속한 그룹. 하나의 그룹은 여러 기억을 갖고 하나의 기억은 하나의 그룹에만 속한수 있다. 1:N관계
  groupId     Int
  TourPlace   TourPlace?      @relation(fields: [tourPlaceId], references: [id]) /// 기억이 위치 정보를 가질 경우 그 위치정보에 해당하는 tourPlace가 관계된다. 위치정보가 없을 경우도 있을수 있어 nullable
  tourPlaceId Int?
  // tripMemoryCategory TripMemoryCategory[] /// 하나의 기억은 여러 카테고리에 속할수 있다.
  user        User            @relation(fields: [userId], references: [id])
  userId      Int

  ShareTripMemory ShareTripMemory?
  photos          IBPhotos[]

  @@unique([title, img])
}

/// 유저는 장소를 방문하고 개인적인 기록을 '기억'으로 남길수 있다. 이중 '공유'한 데이터는 별도로 네트워크에 공유되어 불특정다수에게 보여지고 개인 기억에서 삭제되어도 별도로 보관된다.
model ShareTripMemory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  // isShare   Boolean  @default(false) /// 공유 하려면 true, false일 경우 shareTripMemory를 생성해놓긴 하지만 노출되지 않음
  title     String /// 공유 기억 타이틀. 스팟 데이터에 존재 하지 않던 위치를 잡을 경우 해당 타이틀이 공유 기억장소의 위치 이름으로 나타난다.
  lat       Float /// tourPlace가 가지는 latitude와 동일해야한다. 그러나 tourPlace의 데이터가 업데이트됨에 따라 기존 저장하였던 위치를 따로 기억할 필요가 있다.
  lng       Float /// tourPlace가 가지는 longitude와 동일해야한다. 그러나 tourPlace의 데이터가 업데이트됨에 따라 기존 저장하였던 위치를 따로 기억할 필요가 있다.
  address   String?  @db.Text /// tourPlace가 주소값과 동일해야한다. 그러나 tourPlace의 데이터가 업데이트됨에 따라 기존 저장하였던 위치를 따로 기억할 필요가 있다.
  comment   String   @db.Text
  img       String /// s3 key 형태의 url 또는 직접접근가능한 http 접두어가 포함된 사진링크. shareTripMemory의 mainImg

  like                            Int                               @default(0) /// 공유기억 자체 like 여부
  TourPlace                       TourPlace?                        @relation(fields: [tourPlaceId], references: [id]) /// 기억이 위치 정보를 가질 경우 그 위치정보에 해당하는 tourPlace가 관계된다. 위치정보가 없을 경우도 있을수 있어 nullable
  tourPlaceId                     Int?
  tripMemory                      TripMemory?                       @relation(fields: [tripMemoryId], references: [id])
  tripMemoryId                    Int?                              @unique
  tripMemoryCategory              TripMemoryCategory[] /// 하나의 기억은 여러 카테고리에 속할수 있다.
  user                            User                              @relation(name: "author", fields: [userId], references: [id])
  userId                          Int
  ReplyForShareTripMemory         ReplyForShareTripMemory[]
  NotiNewCommentOnShareTripMemory NotiNewCommentOnShareTripMemory[]
  likeFrom                        User[]                            @relation(name: "likeFrom")

  photos IBPhotos[]

  @@unique([title, img])
}

/// 대댓글 기능을 지원하는 자기참조 모델
model ReplyForShareTripMemory {
  id                Int                       @id @default(autoincrement())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @default(now()) @updatedAt
  text              String                    @db.Text
  shareTripMemory   ShareTripMemory           @relation(fields: [shareTripMemoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareTripMemoryId Int
  user              User?                     @relation(fields: [userId], references: [id]) /// 댓글을 썼던 사용자가 삭제될 경우 null일수도 있다.                
  userId            Int?
  childrenReplies   ReplyForShareTripMemory[] @relation("parentReply")
  parentReply       ReplyForShareTripMemory?  @relation(name: "parentReply", fields: [parentReplyId], references: [id], onDelete: Cascade, onUpdate: Cascade) /// 부모댓글
  parentReplyId     Int?

  noPtrForChildren ReplyForShareTripMemory[] @relation(name: "notUsedForReply") /// prisma schema syntax 때문에 선언해줬으나 사용하지 않을것
  noPtrForParent   ReplyForShareTripMemory?  @relation(name: "notUsedForReply", fields: [noPtrForParentId], references: [id]) /// prisma schema syntax 때문에 선언해줬으나 사용하지 않을것
  noPtrForParentId Int?
}

/// 개인 기억에 개인적으로 태그할 태그들.
model TripMemoryTag {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  name       String /// ex) 가족여행, 제주, 힐링여행
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  tripMemory TripMemory[]

  @@unique([name, userId])
  @@index([name, userId])
}

/// 네트워크 공유시에 공유 기억을 분류할 카테고리. 마치 태그처럼 사용한다.
model TripMemoryCategory {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  super           String            @default("etc") /// 상위 카테고리 ex) food(음식), cafe(카페), lodge(숙소), tour(관광), activity(액티비티), rest(휴식)
  name            String /// 카테고리 ex) 브런치, 한식, 커피...
  shareTripMemory ShareTripMemory[]
  ibPhotoMetaInfo IBPhotoMetaInfo[]

  @@unique([super, name])
  @@index([super, name])
}

/// user가 올린 shareTripMemory 에 코멘트가 달리는 등의 변화사항이 있는지 여부를 확인하기 위한 모델
model NotiNewCommentOnShareTripMemory {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int /// 댓글을 쓴 사람
  shareTripMemory   ShareTripMemory @relation(fields: [shareTripMemoryId], references: [id], onDelete: Cascade, onUpdate: Cascade) /// 댓글이 달린곳
  shareTripMemoryId Int
  userChecked       Boolean         @default(false) /// 유저가 노티를 확인했는지 

  @@index([userId, shareTripMemoryId])
}

enum IBEventStatus {
  OPENED /// 이벤트중
  EXPIRED /// 이벤트만료. 2차 3차로 다시 할수도 있음
  STOPPED /// 이벤트중 중단
  PREPARING /// 이벤트 준비중
  TERMINATED /// 이벤트 완전종료
}

enum Currency {
  USD /// 미국 달러
  KRW /// 한국 원
  JPY /// 일본 엔
  CNY /// 중국 위안
  EUR /// 유럽연합 유로
}

enum IBEventPayType {
  PERIODIC_DAY
  PERIODIC_WEEK
  PERIODIC_MONTH
  PERIODIC_YEAR
  ONCE
  FREE
}

/// 아이디얼블룸 이벤트 프로모션 
model IBEventPromotion {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  status             IBEventStatus        @default(OPENED) /// 이벤트 상태
  name               String               @db.Text /// 이벤트명
  desc               String               @db.LongText /// 이벤트 설명
  price              Int                  @default(0) /// 이벤트가격
  currency           Currency             @default(KRW) /// 이벤트 가격 통화
  payType            IBEventPayType       @default(ONCE) /// 이벤트 가격 지불 방식 (주기적, 일시불, 무료)
  startDate          DateTime             @default(now()) ///  이벤트 시작시각 UTC기준
  endDate            DateTime? /// 이벤트 종료시각 UTC기준 null이면 무제한
  byWhom             String? /// 프로모션 진행 주체
  IBEventApplication IBEventApplication[]
}

///  이벤트 프로모션 참여 신청서 목록
model IBEventApplication {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  content     String            @db.Text /// 전체 신청 내용을 String 형태로 Serialize 해서 저장
  promotion   IBEventPromotion? @relation(fields: [promotionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  promotionId Int?
  user        User?             @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      Int?
}

enum MainBackgroundImgType {
  DAY
  NIGHT
}

model MainBackgroundImg {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @default(now()) @updatedAt
  key       String? /// s3 key path
  url       String?               @db.Text /// 직접접근이 가능한 url이 있을 경우
  title     String?
  type      MainBackgroundImgType
}

model ContentGrpExposedHistory {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  // contentGrp   CardNewsGroup @relation(fields: [contentGrpId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contentGrpId Int
  userTokenId  String
  count        Int      @default(0)

  @@unique([userTokenId, contentGrpId])
  @@index([userTokenId])
}

enum AdPlaceStatus {
  NEW /// 새로 등록 신청된 데이터, 이후 승인이(APPROVED) 나야 IN_USE 상태로 넘어감
  APPROVED /// 등록 승인됨. 이후 시스템 Batch 작업을 통해 TourPlace에 등록되면 IN_USE 상태가 된다.
  IN_USE /// TourPlace에 복사되어 일정 서비스에 장소로 노출된 상태
  STOP /// 사용하다가 여러가지 이유로 TourPlace에서 사용중지 되어 현재는 서비스에 노출되지 않는 상태
  REOPEN_WAIT /// 사용중지인 UNEXPOSED 상태였지만 다시 IN_USE 되기 위해  대기열에 들어간상태
}

/// 업체측에서 관광지로 등록하기위해 신청된 식당, 호텔, 매장, 관광지 등. 담당자 확인후 승인이 되면 TourPlace에 이전 등록되게 된다.
model AdPlace {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
  status            AdPlaceStatus @default(NEW)
  subscribe         Boolean       @default(false) /// 구독상태인지 아닌지
  title             String /// 상호명
  mainImgUrl        String? /// 대표사진 s3 key 형태의 url 또는 직접접근가능한 http 접두어가 포함된 사진링크.
  photos            IBPhotos[] ///  기타 매장 사진 
  // category          AdPlaceCategory[]
  category          IBTravelTag[]
  desc              String? /// 소개글
  address           String? /// 지번주소. 도로명주소와 지번주소중 둘중 하나는 반드시 가져야함
  roadAddress       String? /// 도로명주소
  detailAddress     String? /// 있는 경우 상세주소 nullable
  openWeek          String?       @db.Text /// 영업시간, 영업요일 ex) Mon: 09:00~20:00, Tue: 09:00~20:00, ...
  closedDay         String?       @db.Text /// 휴무일, 정기휴무 날짜 혹은 요일 ex) 'SAT, SUN' ...
  contact           String? /// 대표번호
  siteUrl           String?       @db.Text /// 홈페이지 또는 소셜 계정
  businessNumber    String?       @unique /// 사업자 등록번호, 사업자번호 또는 사업자 등록증 둘중 하나는 반드시 가져야 한다.
  businessRegImgKey String? /// 사업자 등록증 첨부사진 s3 key, 사업자번호 또는 사업자 등록증 둘중 하나는 반드시 가져야 한다. 
  nationalCode      String        @default("82") @db.Char(7) /// 국가 코드. 국제전화번호의 코드이다. 한국 => ex) 82
  tourPlace         TourPlace[] /// 해당 광고 장소와 연관된 tourPlace는 모두 관계가 된다. 실제 AdPlace 등록할때 생성되는 tourPlace는 myTourPlaceId이다.
  mainTourPlaceId   Int? /// adPlace를 등록하는 시점에 생성할 tourPlace. 해당 tourPlace가 광고주가 직접 등록한 tourPlace가 된다. 
  user              User          @relation(fields: [userId], references: [id])
  userId            Int
}

// model AdPlaceCategory {
//   id        Int                        @id @default(autoincrement())
//   createdAt DateTime                   @default(now())
//   updatedAt DateTime                   @default(now()) @updatedAt
//   primary   String
//   secondary String
//   // AdPlace   AdPlace[] @relation()
//   adPlace   AdPlaceToAdPlaceCategory[]

//   @@unique([primary, secondary])
// }

// model AdPlaceToAdPlaceCategory {
//   adPlace           AdPlace         @relation(fields: [adPlaceId], references: [id])
//   adPlaceId         Int
//   adPlaceCategory   AdPlaceCategory @relation(fields: [adPlaceCategoryId], references: [id])
//   adPlaceCategoryId Int

//   @@id([adPlaceId, adPlaceCategoryId])
// }

enum UserChatActionType {
  ASKBOOKINGWELCOME /// 예약문의 첫 환영 인사: ex) 안녕하세요!궁금하신 내용을 보내주세요.가게에서 내용에 대한 답변을 드려요.
  NEWBOOKINGMSG /// ex) 예약하기
  ANSNEWBOOKINGMSG /// ex) '원하는 일자와 시간에 예약문의를 남겨주시면 가게에서 예약 가능여부를 확인해드려요!)
  ASKBOOKINGAVAILABLE /// 예약문의 고객 => 사업자 ex) 유쾌한인어님이7/3 월 14시 2명예약 가능여부를 문의했어요!
  ANSBOOKINGAVAILABLE /// 예약문의답변 사업자 => 고객  ex) 예약이 불가능해요.같은 날짜에 예약이 꽉찼어요.
  CONFIRMBOOKING /// 예약확정 고객 => 사업자, ex) 네 확정할게요
  ANSCONFIRMBOOKING /// ex) 예약 확정을 위해 연락처가 가게에 전달돼요.
  PRIVACYAGREE /// 정보동의 고객 => 사업자 ex) 동의
  FINALBOOKINGCHECK /// 예약성사 사업자 => 고객 /// ex) 예약이 확정되었어요!확정된 예약은 마이북에서 볼 수 있어요.잊지 않고 예약일에 봬요!
  TEXT /// 일반 채팅 메시지
}

model UserChatLog {
  id               Int                       @id @default(autoincrement())
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @default(now()) @updatedAt
  date             DateTime /// 메시지가 전송된 시각
  order            Int                       @default(0) /// userId와 toUserId 간 메시지 순서
  message          String                    @db.VarChar(8000) /// 메시지 본문
  actionType       UserChatActionType
  actionInputParam UserChatActionInputParam?
  subjectGroupId   Int? /// 채팅 메시지 주제 그룹 번호, 만약 예약에 관한것이라면 한건의 예약에 관련된 대화 일체를 하나의 GroupId를 부여해서 어떤 대화주제에 대한 것이었는지를 나타낸다.
  redisKey         String                    @db.Char(27)
  user             User                      @relation(name: "FromUserChat", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int
  toUser           User                      @relation(name: "ToUserChat", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toUserId         Int
}

model UserChatActionInputParam {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  /// askBookingAvailable 액션 관련 파라미터
  bkDate        DateTime? /// 예약일
  bkNumOfPeople Int? /// 예약인원

  /// ansBookingAvailable 액션 관련 파라미터
  bkAnswer       Boolean? /// 예약 APPROVE: true, REJECT: false
  bkRejectReason String? /// 예약문의가 거절일경우 거절사유

  /// confirmBooking 액션 관련 파라미터
  bkConfirmAnswer Boolean? /// 예약 확정 여부 CONFIRM: true, CANCEL: false

  /// privacyAgree
  bkAgreeAnswer Boolean? /// 개인정보 이용동의 여부

  userChatLog   UserChatLog @relation(fields: [userChatLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userChatLogId Int         @unique
}

// /// 예약문의 관련 정보
model BookingInfo {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  date           DateTime
  numOfPeople    Int
  subjectGroupId Int /// 채팅 메시지 주제 그룹 번호, 만약 예약에 관한것이라면 한건의 예약에 관련된 대화 일체를 하나의 GroupId를 부여해서 어떤 대화주제에 대한 것이었는지를 나타낸다.
  customer       User     @relation(name: "asCustomer", fields: [customerId], references: [id])
  customerId     Int
  company        User     @relation(name: "asCompany", fields: [companyId], references: [id])
  companyId      Int
}
